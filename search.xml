<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>指针与引用</title>
      <link href="/%E6%8C%87%E9%92%88%E4%B8%8E%E5%BC%95%E7%94%A8.html"/>
      <url>/%E6%8C%87%E9%92%88%E4%B8%8E%E5%BC%95%E7%94%A8.html</url>
      
        <content type="html"><![CDATA[<h1 id="内存地址与访问方式"><a href="#内存地址与访问方式" class="headerlink" title="内存地址与访问方式"></a>内存地址与访问方式</h1><p>内存地址：系统根据程序中定义变量的类型，给变量分配一定的长度空间。内存区的每个字节都有编号，称之为地址。</p><h1 id="指针的定义"><a href="#指针的定义" class="headerlink" title="指针的定义"></a>指针的定义</h1><p>指针变量：用于专门存放地址的变量。</p><p>定义方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类型表示符 *指针变量名;</span><br></pre></td></tr></table></figure><p>赋值：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p=&amp;i;</span><br><span class="line"><span class="type">int</span> *p=&amp;i;</span><br></pre></td></tr></table></figure><p>&amp;用来取变量的地址</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *p,a[<span class="number">10</span>];</span><br><span class="line">p=a;</span><br><span class="line">p=&amp;a[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>*用来取指针指向地址的内容（解地址）</p><p>void* 类型的指针可以指向任意类型的变量</p><p>指针在初始化时一般int *p&#x3D;NULL;</p><p>malloc</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *str=(<span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="number">100</span>*<span class="built_in">sizeof</span>(<span class="type">char</span>));</span><br></pre></td></tr></table></figure><p>注：</p><ol><li><p>在调用malloc之后，需要判断申请是否成功</p><p>失败返回NULL，成功返回开辟好的空间的首地址</p></li><li><p>多次malloc，申请的内存不一定是连续的</p></li><li><p>函数返回值类型为void *，需要强制类型转换</p></li></ol><p>calloc</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *p=(<span class="type">char</span> *)<span class="built_in">calloc</span>(<span class="number">3</span>,<span class="number">100</span>);<span class="comment">//在内存中申请了三块，每块大小为100个字节</span></span><br></pre></td></tr></table></figure><p>注：</p><p>calloc申请的内存中的内容为0，而malloc中的内容随机</p><p>realloc</p><p>在原本申请好的堆区空间的基础上重新申请内存，新开辟的空间大小为函数的第二个参数</p><p>如果原本申请好的空间的后面不足以增加指定的大小，系统会重新找一个足够大的位置开辟指定的空间，然后将原本空间中的数据拷贝过来，然后释放原本的空间</p><p>如果newsize比原先的内存小，则会释放原先内存的后面的存储空间只留前面的newsize个字节</p><p>free</p><p>free(p);</p><p>p&#x3D;NULL;</p><p>注：</p><ol><li>free函数只能释放堆区的空间</li><li>当free后，p变成野指针了，要p&#x3D;NULL</li><li>一块动态申请的内存只能free一次，不能多次free</li></ol><p>数组指针</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> (*p)[<span class="number">4</span>];</span><br><span class="line"><span class="comment">//p是一个指针，它指向包含4个元素的一维数组</span></span><br></pre></td></tr></table></figure><p>指针与二维数组<br>a代表二维数组的首地址，第0行的地址<br>a+i代表第i行的地址<br>*（a+i）即a[i]代表第i行第0列的地址<br>*（a+i）+j即a[i]+j<br>代表第i行第例的地址<br><em>（</em>（a+i）+j）即a[i][j代表第i行第j列的元素</p>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++运算符优先级</title>
      <link href="/C++%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7.html"/>
      <url>/C++%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7.html</url>
      
        <content type="html"><![CDATA[<p>第一级： </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[] () . -&gt;</span><br></pre></td></tr></table></figure><p>第二级：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (类型) ++ -- * &amp; ! ~ sizeof</span><br></pre></td></tr></table></figure><p>第三级：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/ * %</span><br></pre></td></tr></table></figure><p>第四级：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+ -</span><br></pre></td></tr></table></figure><p>第五级：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt; &gt;&gt;</span><br></pre></td></tr></table></figure><p>第六级：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; &gt;= &lt; &lt;=</span><br></pre></td></tr></table></figure><p>第七级：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">== !=</span><br></pre></td></tr></table></figure><p>第八~十四级：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&amp;</span><br><span class="line">^</span><br><span class="line">|</span><br><span class="line">&amp;&amp;</span><br><span class="line">||</span><br><span class="line">?:</span><br></pre></td></tr></table></figure><h1 id="逻辑中断："><a href="#逻辑中断：" class="headerlink" title="逻辑中断："></a>逻辑中断：</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(表达式1)||(表达式2)</span><br><span class="line">若表达式1为真，则不执行表达式2</span><br><span class="line"></span><br><span class="line">(表达式1)&amp;&amp;(表达式2)</span><br><span class="line">若表达式1为假，则不执行表达式2</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>相当于电路中的断路处理，<del>可用于压行</del></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单调栈&amp;单调队列</title>
      <link href="/%E5%8D%95%E8%B0%83%E6%A0%88&amp;%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97.html"/>
      <url>/%E5%8D%95%E8%B0%83%E6%A0%88&amp;%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97.html</url>
      
        <content type="html"><![CDATA[<h1 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h1><p>一种内部元素具有单调性的栈</p><h2 id="洛谷P2866-USACO06NOV-Bad-Hair-Day-S"><a href="#洛谷P2866-USACO06NOV-Bad-Hair-Day-S" class="headerlink" title="洛谷P2866 [USACO06NOV]Bad Hair Day S"></a>洛谷P2866 [USACO06NOV]Bad Hair Day S</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>有$N (N \leq 80000)$头奶牛，每一头牛都站在一排，身高为$h_i$。<br>对于第$i$头牛前面的第$j$头牛，如果$h_i&gt;h_{i+1}$并且$h_i&gt;h_{i+2}$ $\cdots$ $h_i&gt;h_j$，那么认为第$i$头牛可以看到第$i+1$到第$j$头牛。</p><p>定义$C_i$为第$i$头牛所能看到的别的牛的数量。请帮助农夫约翰求出$\sum_{i&#x3D;1}^n C_i$.</p><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>考虑一头牛能被几头牛看到。</p><p>形象地来说，就是<del>如果一个人比你小，还比你强，那你就可以退役了</del></p><h1 id="单调队列"><a href="#单调队列" class="headerlink" title="单调队列"></a>单调队列</h1>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -单调栈 -单调队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搜索技巧</title>
      <link href="/%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A7.html"/>
      <url>/%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A7.html</url>
      
        <content type="html"><![CDATA[<h1 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h1><p>深度优先搜索（ $Depth$  $First$  $Search$  ）其过程简要来说是对每一个可能的分支路径深入到不能再深入为止，而且每个节点只能访问一次.</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>每次寻找下一个节点的过程是重复的</li><li>如果当前节点没有未访问过的后继节点，则需要<strong>回溯</strong>到有未访问过的后继节点的一个先驱节点，继续遍历</li></ul><p>形象化描述：不撞南墙不回头</p><p>$DFS$ 一般通过递归来实现，本质上用栈来维护。</p><p>大部分 $DFS$ 算法分为三部分：</p><ol><li>判断当前位置是否合法（是否为边界）</li><li>处理信息</li><li>访问下一个位置</li></ol><h2 id="剪枝"><a href="#剪枝" class="headerlink" title="剪枝"></a>剪枝</h2><h3 id="最优化剪枝"><a href="#最优化剪枝" class="headerlink" title="最优化剪枝"></a>最优化剪枝</h3><p>设 $g(x)$ 表示从起点走到节点 $x$ 能获得的价值，估价函数 $f(x)$ 为从节点 $x$ 走到终点能获得的最大价值。</p><p>如果 $g(x)+f(x)&lt;$ 当前的已经找到的解，则说明从节点 $x$ 走下去一定得不到最优解，可剪去此分支。</p><h4 id="洛谷P1074-NOIP2009-提高组-靶形数独"><a href="#洛谷P1074-NOIP2009-提高组-靶形数独" class="headerlink" title="洛谷P1074  [NOIP2009 提高组] 靶形数独"></a>洛谷P1074  [NOIP2009 提高组] 靶形数独</h4><p>靶形数独每一个方格都有一个分值，而且如同一个靶子一样，离中心越近则分值越高。（如图）</p><p> <img src="https://cdn.luogu.com.cn/upload/pic/28.png"> </p><p>每个人必须完成一个给定的数独（每个给定数独可能有不同的填法），而且要争取更高的总分数。而这个总分数即每个方格上的分值和完成这个数独时填在相应格上的数字的乘积的总和。 </p><p>求出对于给定的靶形数独，能够得到的最高分数。</p><p>对于 $100%$ 的数据，数独中非 $0$ 数的个数不少于 $24$。</p><hr><p>如果当前得到的分值+之后可能得到的最大的分值还是小于之前的最优答案，结束</p><h3 id="可行性剪枝"><a href="#可行性剪枝" class="headerlink" title="可行性剪枝"></a>可行性剪枝</h3><p>如果当前位置不合法，则返回</p><h4 id="洛谷P1025-NOIP2001-提高组-数的划分"><a href="#洛谷P1025-NOIP2001-提高组-数的划分" class="headerlink" title="洛谷P1025 [NOIP2001 提高组] 数的划分"></a>洛谷P1025 [NOIP2001 提高组] 数的划分</h4><p>将整数 $n$ 分成 $k$ 份，且每份不能为空，任意两个方案不相同（不考虑顺序）。</p><p>例如：$n&#x3D;7$，$k&#x3D;3$，下面三种分法被认为是相同的。</p><p>$1,1,5$;<br>$1,5,1$;<br>$5,1,1$.</p><p>问有多少种不同的分法。</p><p>（$6&lt;n \le 200$，$2  \le k  \le  6$）</p><hr><p>$dfs(x,r,l)$ 表示当前正在分第 $x$ 份，剩余 $r$ 没有划分，上一份大小为 $l$</p><p>当 $r&lt;0$ ，说明当前及之后所有位置全部放上个位置的数时，仍比剩余可分配的数要小，退出</p><h3 id="优化搜索顺序"><a href="#优化搜索顺序" class="headerlink" title="优化搜索顺序"></a>优化搜索顺序</h3><p>让不合法的情况在一开始就被剪掉</p><h4 id="洛谷P1074-NOIP2009-提高组-靶形数独-1"><a href="#洛谷P1074-NOIP2009-提高组-靶形数独-1" class="headerlink" title="洛谷P1074 [NOIP2009 提高组] 靶形数独"></a>洛谷P1074 [NOIP2009 提高组] 靶形数独</h4><p>从剩余未填格最少的一行或一列开始填</p><h3 id="记忆化搜索"><a href="#记忆化搜索" class="headerlink" title="记忆化搜索"></a>记忆化搜索</h3><p>如果当前位置之后的信息全部处理过了，就可以直接利用这些信息</p><h4 id="洛谷P1434-SHOI2002-滑雪"><a href="#洛谷P1434-SHOI2002-滑雪" class="headerlink" title="洛谷P1434 [SHOI2002] 滑雪"></a>洛谷P1434 [SHOI2002] 滑雪</h4><p>Michael 喜欢滑雪。可是为了获得速度，滑的区域必须向下倾斜。Michael 想知道在一个区域中最长的滑坡。区域由一个二维数组给出。数组的每个数字代表点的高度。下面是一个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1   2   3   4   5</span><br><span class="line">16  17  18  19  6</span><br><span class="line">15  24  25  20  7</span><br><span class="line">14  23  22  21  8</span><br><span class="line">13  12  11  10  9</span><br></pre></td></tr></table></figure><p>一个人可以从某个点滑向上下左右相邻四个点之一，当且仅当高度会减小。在上面的例子中，一条可行的滑坡为 $24$－$17$－$16$－$1$（从 $24$ 开始，在 $1$ 结束）。当然    $25$－$24$－$23$－$\ldots$－$3$－$2$－$1$ 更长。事实上，这是最长的一条。</p><p>对于 $100%$ 的数据，$1\leq R,C\leq 100$。</p><hr><p>记录从每个点开始的最长滑坡是多少</p><h3 id="玄学剪枝"><a href="#玄学剪枝" class="headerlink" title="玄学剪枝"></a>玄学剪枝</h3><h4 id="洛谷P1120-小木棍"><a href="#洛谷P1120-小木棍" class="headerlink" title="洛谷P1120 小木棍"></a>洛谷P1120 小木棍</h4><p>乔治有一些同样长的小木棍，他把这些木棍随意砍成几段，直到每段的长都不超过 $50$。</p><p>现在，他想把小木棍拼接成原来的样子，但是却忘记了自己开始时有多少根木棍和它们的长度。</p><p>给出每段小木棍的长度，编程帮他找出原始木棍的最小可能长度。</p><p>$1 \leq n \leq 65$，$1 \leq a_i \leq 50$。</p><hr><ol><li><p>原始长度枚举到 <strong>所有木棍的长度和 $&#x2F;2$</strong>  即可，因为此时所有木棍有可能拼成2根木棍，原始长度再大的话只能是所有木棍拼成1根。</p></li><li><p><strong>优化搜索顺序</strong>:  对输入的所有木棍按长度从大到小排序，从长到短地将木棍拼入。</p></li><li><p><strong>玄学 $next$ 数组</strong>：当dfs返回失败，需要更换当前使用的木棍时，不要再用与当前木棍的长度相同的木棍。预处理出了排序后每根木棍后面的最后一根与这根木棍长度相等的木棍（程序中的next数组），它的下一根木棍就是第一根长度不相等的木棍了。（去重）</p></li><li><p><strong>可行性剪枝</strong>: 只找木棍长度不大于未拼长度rest的所有木棍。(二分)</p></li><li><p>如果 **当前长棍剩余的未拼长度 **等于 <strong>当前木棍的长度或原始长度</strong> ，继续拼下去时却失败了，就直接回溯并改之前拼的木棍。</p></li></ol><p>​       1)  当前长棍剩余的未拼长度等于当前木棍的长度时，这根木棍在最优情况下显然是拼到这（如果用更多短木根拼完剩下的这段，把这根木棍留到后面显然不如把更多总长相等的短木棍扔到后面）。如果在最优情况下继续拼下去失败了，那肯定是之前的木棍用错了，回溯改即可。</p><p>​         2) 当前长棍剩余的未拼长度等于原始长度时，说明这根原来的长棍还一点没拼，现在正在放入一根木棍。很明显，这根木棍还没有跟其它棍子拼接，如果现在拼下去能成功话，它肯定是能用上的，即自组或与其它还没用的木棍拼接。但继续拼下去却失败，说明现在这根木棍不能用上，无法完成拼接，所以回溯改之前的木棍。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,S,L,cnt;</span><br><span class="line"><span class="type">int</span> a[<span class="number">71</span>],next[<span class="number">71</span>];</span><br><span class="line"><span class="type">bool</span> v[<span class="number">71</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> last,<span class="type">int</span> rest)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!rest)&#123;</span><br><span class="line">x++,rest=L;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">if</span>(!v[i]&amp;&amp;a[i]&lt;=rest)&#123;</span><br><span class="line">v[i]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs</span>(x,i,rest-a[i]);</span><br><span class="line">v[i]=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(rest==a[i]||rest==L) <span class="keyword">return</span>;</span><br><span class="line">i=next[i]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(i&gt;=n) <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x&gt;=cnt) &#123;cout&lt;&lt;L&lt;&lt;endl,<span class="built_in">exit</span>(<span class="number">0</span>);&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=last+<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">if</span>(!v[i]&amp;&amp;a[i]&lt;=rest)&#123;</span><br><span class="line">v[i]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs</span>(x,i,rest-a[i]);</span><br><span class="line">v[i]=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(rest==a[i]||rest==L) <span class="keyword">return</span>;</span><br><span class="line">i=next[i];</span><br><span class="line"><span class="keyword">if</span>(i==n) <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> i,k;</span><br><span class="line">cin&gt;&gt;cnt;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=cnt;i++)&#123;</span><br><span class="line">cin&gt;&gt;k;</span><br><span class="line"><span class="keyword">if</span>(k&gt;<span class="number">50</span>) <span class="keyword">continue</span>;</span><br><span class="line">a[++n]=k,S+=k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>,<span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line"></span><br><span class="line">next[n]=n;</span><br><span class="line"><span class="keyword">for</span>(i=n<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line"><span class="keyword">if</span>(a[i]==a[i+<span class="number">1</span>]) next[i]=next[i+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">else</span> next[i]=i;</span><br><span class="line"><span class="keyword">for</span>(L=a[<span class="number">1</span>];L&lt;=S/<span class="number">2</span>;L++)&#123;</span><br><span class="line">cnt=S/L;</span><br><span class="line"><span class="keyword">if</span>(S%L) <span class="keyword">continue</span>;</span><br><span class="line">v[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">1</span>,L-a[<span class="number">1</span>]);</span><br><span class="line">v[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;S&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h1><p>广度优先搜索（$Broad$  $First$  $Search$ ）是一种分层的查找过程，每次将下一层的所有节点加入待访问队列，不像深度优先搜索有回溯的过程。</p><p>同时与深搜用栈来维护不同，广搜一般是用队列来进行维护的。</p><p>具体操作：它是先将起始状态加入队列，然后每次从队列中取出一个状态，将其后继状态加入队列（后继状态指的是由当前状态一步操作可以到达的状态），直到所有状态均被访问为止。</p><h2 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h2><ol><li><p>它并不考虑结果的可能位置，而是彻底地搜索所有状态，所以很少有基于 BFS 的启发式算法，也很少对 BFS 进行剪枝。</p></li><li><p>相对于 DFS，BFS 更加难于保存当前节点的状态，所以 BFS <strong>在爆搜中的应用较少。</strong></p></li><li><p>在某一层还没有搜索完时，是不会进入下一层的，也就是说在队列中所有同一深度的状态，是<strong>连续的一段</strong>。</p></li></ol><p>一般的代码实现方式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">BFS</span>()&#123;</span><br><span class="line">    q.<span class="built_in">push</span>(初始状态);</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        u=q.<span class="built_in">front</span>();  取出队首元素</span><br><span class="line">        遍历所有相邻且未加入队列的元素</span><br><span class="line">        &#123;</span><br><span class="line">            处理信息</span><br><span class="line">            q.<span class="built_in">push</span>(); 加入队列</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>求最小步数一类的题目一般使用 $BFS$</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分学习笔记</title>
      <link href="/%E4%BA%8C%E5%88%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html"/>
      <url>/%E4%BA%8C%E5%88%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</url>
      
        <content type="html"><![CDATA[<h1 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h1><p>在一段单调的序列上查找一个数，可以采用折半的方法，每次将查找的范围缩小一半</p><h2 id="模板："><a href="#模板：" class="headerlink" title="模板："></a>模板：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">l=<span class="number">1</span>,r=n;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=a[mid]) r=mid<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;l&lt;&lt;endl;</span><br></pre></td></tr></table></figure><p>查找的复杂度为$ \mathcal{O}(\text{log}n)$</p><h2 id="STL函数："><a href="#STL函数：" class="headerlink" title="STL函数："></a>STL函数：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">lower_bound</span>(first,last,val);<span class="comment">//first,last及返回值都为迭代器,可在最后加比较器</span></span><br></pre></td></tr></table></figure><p>在非递减区间 $[first,last)$ 中进行二分查找，返回大于或等于 $val$ 的第一个元素位置。如果所有元素都小于 $val$ ，则返回 $last$ 的位置。</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">upper_bound</span>(first,last,val);<span class="comment">//first,last及返回值都为迭代器,可在最后加比较器</span></span><br></pre></td></tr></table></figure><p>在非递减区间 $[first,last)$ 中进行二分查找，返回大于 $val$ 的第一个元素位置。如果所有元素都小于$val$ ，则返回 $last$ 的位置。</p><h1 id="二分答案"><a href="#二分答案" class="headerlink" title="二分答案"></a>二分答案</h1><h2 id="适用条件："><a href="#适用条件：" class="headerlink" title="适用条件："></a>适用条件：</h2><ol><li>最优解满足单调性</li><li>最优解满足有界性</li></ol><p>即：</p><p>对于 $[a,b]$ 区间内的最优解 $x_0,$ 满足：</p><p>$\forall x_1&lt;x_0  , x_1$ 均为次优解，$\forall x_2&gt;x_0,x_2 $ 均为不可行解。</p><h2 id="模板：-1"><a href="#模板：-1" class="headerlink" title="模板："></a>模板：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(l&lt;=r)&#123; </span><br><span class="line">mid=(l+r)/<span class="number">2</span>; </span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">sol</span>(mid)) r=mid<span class="number">-1</span>; </span><br><span class="line"><span class="keyword">else</span> l=mid+<span class="number">1</span>; </span><br><span class="line">&#125; </span><br><span class="line">cout&lt;&lt;l&lt;&lt;endl;</span><br></pre></td></tr></table></figure><p>大部分二分答案的题目的框架是不变的，变化的只有两个部分：</p><ol><li><p>$sol$ 函数：根据每个题目写出具体的判断函数，需要注意取等条件</p></li><li><p><strong>最终答案</strong>：需要具体判断</p><p>当 $l&#x3D;&#x3D;r$ 的时候，判断最终答案是 $l$ 还是 $l-1$</p></li></ol><p>一般来说，二分答案的题目的解很难直接求出，但很容易判断一个解是否可行</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高精度模板</title>
      <link href="/%E9%AB%98%E7%B2%BE%E5%BA%A6%E6%A8%A1%E6%9D%BF.html"/>
      <url>/%E9%AB%98%E7%B2%BE%E5%BA%A6%E6%A8%A1%E6%9D%BF.html</url>
      
        <content type="html"><![CDATA[<h1 id="高精度加法"><a href="#高精度加法" class="headerlink" title="高精度加法"></a>高精度加法</h1><p><a href="https://www.luogu.com.cn/problem/P1601">P1601 A+B Problem（高精）</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">qmax</span><span class="params">(T &amp;x,<span class="type">const</span> T &amp;y)</span></span>&#123;<span class="keyword">if</span>(x&lt;y) x=y;&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> l1,l2,l;</span><br><span class="line">string s1,s2;</span><br><span class="line"><span class="type">int</span> a[<span class="number">3</span>][<span class="number">505</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reverse</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> l)</span></span>&#123;        <span class="comment">//翻转</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=l/<span class="number">2</span>;i++) <span class="built_in">swap</span>(a[x][i],a[x][l-i+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="built_in">max</span>(l1,l2);i++)&#123;</span><br><span class="line">a[<span class="number">0</span>][i]+=a[<span class="number">1</span>][i]+a[<span class="number">2</span>][i];</span><br><span class="line"><span class="keyword">if</span>(a[<span class="number">0</span>][i]&gt;=<span class="number">10</span>) a[<span class="number">0</span>][i+<span class="number">1</span>]+=a[<span class="number">0</span>][i]/<span class="number">10</span>,a[<span class="number">0</span>][i]%=<span class="number">10</span>,l=i+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">qmax</span>(l,<span class="built_in">max</span>(l1,l2));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> i,j;</span><br><span class="line">cin&gt;&gt;s1&gt;&gt;s2;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;s1.<span class="built_in">size</span>();i++) a[<span class="number">1</span>][++l1]=s1[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;s2.<span class="built_in">size</span>();i++) a[<span class="number">2</span>][++l2]=s2[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="built_in">reverse</span>(<span class="number">1</span>,l1),<span class="built_in">reverse</span>(<span class="number">2</span>,l2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">add</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=l;i&gt;=<span class="number">1</span>;i--) cout&lt;&lt;a[<span class="number">0</span>][i];</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="高精度乘法"><a href="#高精度乘法" class="headerlink" title="高精度乘法"></a>高精度乘法</h1><p><a href="https://www.luogu.com.cn/problem/P1303">P1303 A*B Problem</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">qmax</span><span class="params">(T &amp;x,<span class="type">const</span> T &amp;y)</span></span>&#123;<span class="keyword">if</span>(x&lt;y) x=y;&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> l1,l2,l;</span><br><span class="line">string s1,s2;</span><br><span class="line"><span class="type">int</span> a[<span class="number">3</span>][<span class="number">5005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reverse</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> l)</span></span>&#123;        <span class="comment">//·­×ª</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=l/<span class="number">2</span>;i++) <span class="built_in">swap</span>(a[x][i],a[x][l-i+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Plus</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=l1;i++) </span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=l2;j++) a[<span class="number">0</span>][i+j<span class="number">-1</span>]+=a[<span class="number">1</span>][i]*a[<span class="number">2</span>][j];</span><br><span class="line"></span><br><span class="line">l=l1+l2+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=l;i++) </span><br><span class="line"><span class="keyword">if</span>(a[<span class="number">0</span>][i]&gt;=<span class="number">10</span>) a[<span class="number">0</span>][i+<span class="number">1</span>]+=a[<span class="number">0</span>][i]/<span class="number">10</span>,a[<span class="number">0</span>][i]%=<span class="number">10</span>,<span class="built_in">qmax</span>(l,i+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(i=l;i&gt;=<span class="number">1</span>;i--) </span><br><span class="line"><span class="keyword">if</span>(a[<span class="number">0</span>][l]==<span class="number">0</span>) l=i<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> i,j;</span><br><span class="line">cin&gt;&gt;s1&gt;&gt;s2;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;s1.<span class="built_in">size</span>();i++) a[<span class="number">1</span>][++l1]=s1[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;s2.<span class="built_in">size</span>();i++) a[<span class="number">2</span>][++l2]=s2[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="built_in">reverse</span>(<span class="number">1</span>,l1),<span class="built_in">reverse</span>(<span class="number">2</span>,l2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Plus</span>();</span><br><span class="line"><span class="keyword">if</span>(l==<span class="number">0</span>) cout&lt;&lt;<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">for</span>(i=l;i&gt;=<span class="number">1</span>;i--) cout&lt;&lt;a[<span class="number">0</span>][i];</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="高精度除法"><a href="#高精度除法" class="headerlink" title="高精度除法"></a>高精度除法</h1><p><a href="https://www.luogu.com.cn/problem/P1480">P1480 A&#x2F;B Problem</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">qmax</span><span class="params">(T &amp;x,<span class="type">const</span> T &amp;y)</span></span>&#123;<span class="keyword">if</span>(x&lt;y) x=y;&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> l1,l;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> x;</span><br><span class="line">string s1;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> a[<span class="number">5005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reverse</span><span class="params">(<span class="type">int</span> l)</span></span>&#123;        <span class="comment">//翻转</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=l/<span class="number">2</span>;i++) <span class="built_in">swap</span>(a[i],a[l-i+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Div</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l1;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">a[i<span class="number">-1</span>]+=(a[i]-(a[i]/x)*x)*<span class="number">10</span>,a[i]/=x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> i,j;</span><br><span class="line">cin&gt;&gt;s1&gt;&gt;x;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;s1.<span class="built_in">size</span>();i++) a[++l1]=s1[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="built_in">reverse</span>(l1);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Div</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=l1;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line"><span class="keyword">if</span>(a[i]!=<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span>(i&lt;<span class="number">1</span>) cout&lt;&lt;<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">for</span>(l1=i;i&gt;=<span class="number">1</span>;i--) cout&lt;&lt;a[i]; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高精度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双指针学习笔记</title>
      <link href="/%E5%8F%8C%E6%8C%87%E9%92%88%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html"/>
      <url>/%E5%8F%8C%E6%8C%87%E9%92%88%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</url>
      
        <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>使用两个指针维护一段序列区间，保证左指针一定小于右指针，并且指针只会向右移动。</p><p>右指针每次向右移动一格；对于右指针的每一个位置，左指针也向右移动，直到所代表的区间满足条件为止。</p><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="洛谷P1638-逛画展"><a href="#洛谷P1638-逛画展" class="headerlink" title="洛谷P1638  逛画展"></a>洛谷P1638  逛画展</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>博览馆正在展出由世上最佳的 $m$ 位画家所画的图画。</p><p>游客在购买门票时必须说明两个数字，$a$ 和 $b$，代表他要看展览中的第 $a$ 幅至第 $b$ 幅画（包含 $a,b$）之间的所有图画，而门票的价钱就是一张图画一元。</p><p>Sept 希望入场后可以看到所有名师的图画。当然，他想最小化购买门票的价格。</p><p>请求出他购买门票时应选择的 $a,b$，数据保证一定有解。</p><p>若存在多组解，<strong>输出 $a$ 最小的那组</strong>。</p><p> $1\leq n\le10^6$，$1 \leq a_i \leq m\le2\times10^3$。</p><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>题目需要求区间的两个端点，则可用左右指针分别代表区间的两个端点。</p><p>每次左指针向右移动，直至区间里的数有 $m$ 种为止。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 1000005</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 2147483647</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m,ans=inf,sum,ansl,ansr;</span><br><span class="line"><span class="type">int</span> a[N],f[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">f[a[x]]++;</span><br><span class="line"><span class="keyword">if</span>(f[a[x]]==<span class="number">1</span>) sum++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mns</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">f[a[x]]--;</span><br><span class="line"><span class="keyword">if</span>(f[a[x]]==<span class="number">0</span>) sum--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> l=<span class="number">0</span>,r=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(r=<span class="number">1</span>;r&lt;=n;r++)&#123;</span><br><span class="line"><span class="built_in">add</span>(r);</span><br><span class="line"><span class="keyword">while</span>(sum==m&amp;&amp;l&lt;=r)&#123;</span><br><span class="line"><span class="built_in">mns</span>(++l);</span><br><span class="line"><span class="keyword">if</span>(ans&gt;r-l) ans=<span class="built_in">min</span>(ans,r-l),ansl=l,ansr=r;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;ansl&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;ansr&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="洛谷P4653-CEOI2017-Sure-Bet"><a href="#洛谷P4653-CEOI2017-Sure-Bet" class="headerlink" title="洛谷P4653 [CEOI2017] Sure Bet"></a>洛谷P4653 [CEOI2017] Sure Bet</h2><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><p>现在有 $n$ 个A类灯泡和 $n$ 个B类灯泡，每个灯泡都有各自的权值。</p><p>我们将这些灯泡分为 $n$ 组，每组包含一个来自A类的灯泡和一个来自B类的灯泡。</p><p>你可以从中选取任意个灯泡，每选取一个灯泡需要花费 $1$ 的代价。</p><p>在你选取完之后，系统会随机在A类和B类中选择一个类型，并点亮那一类的所有灯泡。你选取的每个点亮的灯泡会给你带来等于它权值的收益。</p><p>现在请你合理选取灯泡，以最大化可能的最小收益。你只需要求出来这个收益即可。</p><p> $1.0\le A_i,B_i\le 1000.0$，$0\le n\le 10^5$。</p><h3 id="解析-1"><a href="#解析-1" class="headerlink" title="解析"></a>解析</h3><p>当选取的A组物品总价值大于B组时，只有从B组选取才能达到更优解</p><p>从另一组选取时，需要使两组物品的价值尽可能相等</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">qmax</span><span class="params">(T &amp;x,<span class="type">const</span> T &amp;y)</span></span>&#123;<span class="keyword">if</span>(x&lt;y) x=y;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 100005</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">double</span> a[N],b[N],ans1,ans2,ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">double</span> a,<span class="type">double</span> b)</span></span>&#123;<span class="keyword">return</span> a&gt;b;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> i,l=<span class="number">0</span>,r;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf&quot;</span>,&amp;a[i],&amp;b[i]);</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>,cmp),<span class="built_in">sort</span>(b+<span class="number">1</span>,b+n+<span class="number">1</span>,cmp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(r=<span class="number">1</span>;r&lt;=n;r++)&#123;</span><br><span class="line">ans1+=a[r];</span><br><span class="line"><span class="built_in">qmax</span>(ans,<span class="built_in">min</span>(ans1-(l+r),ans2-(l+r)));</span><br><span class="line"><span class="keyword">while</span>(ans2&lt;=ans1&amp;&amp;l&lt;=n) ans2+=b[++l],<span class="built_in">qmax</span>(ans,<span class="built_in">min</span>(ans1-(l+r),ans2-(l+r)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.4lf&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用STL函数</title>
      <link href="/%E5%B8%B8%E7%94%A8STL%E5%87%BD%E6%95%B0.html"/>
      <url>/%E5%B8%B8%E7%94%A8STL%E5%87%BD%E6%95%B0.html</url>
      
        <content type="html"><![CDATA[<h1 id="C-标准模板库-STL-之Vector容器"><a href="#C-标准模板库-STL-之Vector容器" class="headerlink" title="C++标准模板库(STL)之Vector容器:"></a>C++标准模板库(STL)之Vector容器:</h1><p>是一种顺序容器，事实上和数组差不多，但它比数组更优越。一般来说数组不能<strong>动态</strong>拓展，因此在程序运行的时候不是浪费内存，就是造成越界。而vector正好弥补了这个缺陷，它的特征是相当于可分配拓展的数组，它的随机访问快，在末端插入和删除快，在中间插入和删除慢。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">v.<span class="built_in">push_back</span>(t)  <span class="comment">//在数组的最后添加一个值为t的元素</span></span><br><span class="line">v.<span class="built_in">pop_back</span>()  <span class="comment">//去掉数组的最后一个数据 </span></span><br><span class="line">v.<span class="built_in">front</span>() 　　　<span class="comment">//返回第一个元素</span></span><br><span class="line">v.<span class="built_in">back</span>()    <span class="comment">//返回最后一个元素</span></span><br><span class="line">v.<span class="built_in">begin</span>()    <span class="comment">//得到数组头的指针，用迭代器接受</span></span><br><span class="line">v.<span class="built_in">end</span>()     <span class="comment">//得到数组的最后一个单元+1的指针，用迭代器接受</span></span><br><span class="line">v.<span class="built_in">clear</span>()    <span class="comment">// 移除容器中所有数据</span></span><br><span class="line">v.<span class="built_in">empty</span>()    <span class="comment">//判断容器是否为空吗，如果为空，则返回true 。</span></span><br><span class="line">v.<span class="built_in">erase</span>(pos)  <span class="comment">//删除pos位置的数据</span></span><br><span class="line">v.<span class="built_in">erase</span>(beg,end)<span class="comment">// 删除[beg,end)区间的数据</span></span><br><span class="line">v.<span class="built_in">size</span>()     <span class="comment">//回容器中实际数据的个数</span></span><br><span class="line">v.<span class="built_in">insert</span>(pos,data) <span class="comment">//在pos处插入数据</span></span><br><span class="line">v[n]        <span class="comment">//返回 v中位置为 n的元素。</span></span><br><span class="line">v.<span class="built_in">at</span>(n)     <span class="comment">// 返回 v中位置为 n的元素</span></span><br></pre></td></tr></table></figure><h1 id="C-标准模板库-STL-之Set容器"><a href="#C-标准模板库-STL-之Set容器" class="headerlink" title="C++标准模板库(STL)之Set容器:"></a>C++标准模板库(STL)之Set容器:</h1><p>关于set，必须说明的是set关联式容器。set作为一个容器也是用来存储同一数据类型的数据类型，并且能从一个数据集合中取出数据，在set中每个元素的值都唯一，而且系统能根据元素的值自动进行排序。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">s.<span class="built_in">begin</span>()     <span class="comment">//返回指向第一个元素的迭代器</span></span><br><span class="line">s.<span class="built_in">end</span>()      <span class="comment">//返回指向最后一个元素之后的迭代器，不是最后一个元素</span></span><br><span class="line">s.<span class="built_in">clear</span>()     <span class="comment">//清除所有元素   O(n)</span></span><br><span class="line">s.<span class="built_in">count</span>()     <span class="comment">//返回某个值元素的个数O(logn)</span></span><br><span class="line">s.<span class="built_in">empty</span>()    <span class="comment">//如果集合为空，返回true</span></span><br><span class="line">s.<span class="built_in">erase</span>()     <span class="comment">//删除集合中的元素O(logn)</span></span><br><span class="line">s.<span class="built_in">find</span>()      <span class="comment">//返回一个指向被查找到元素的迭代器，如果没找到则返回end()</span></span><br><span class="line">s.<span class="built_in">insert</span>()     <span class="comment">//在集合中插入元素O(logn)</span></span><br><span class="line">s.<span class="built_in">size</span>()     <span class="comment">//集合中元素的数目O(1)</span></span><br></pre></td></tr></table></figure><h1 id="C-标准模板库-STL-之Map映射"><a href="#C-标准模板库-STL-之Map映射" class="headerlink" title="C++标准模板库(STL)之Map映射:"></a>C++标准模板库(STL)之Map映射:</h1><p>Map是STL的一个关联容器，它提供一对一（其中第一个可以称为关键字，每个关键字只能在map中出现一次，第二个可能称为该关键字的值）的数据处理能力，由于这个特性，它完成有可能在我们处理一对一数据的时候，在编程上提供快速通道。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">map&lt;string,<span class="type">int</span>&gt; m构建了一个字符串到整数的映射。</span><br><span class="line">m.<span class="built_in">begin</span>()     <span class="comment">//返回指向map头部的迭代器</span></span><br><span class="line">m.<span class="built_in">clear</span>(）     <span class="comment">////删除所有元素     O(n)</span></span><br><span class="line">m.<span class="built_in">count</span>()     <span class="comment">//返回指定元素出现的次数O(logn)</span></span><br><span class="line">m.<span class="built_in">empty</span>()     <span class="comment">//如果map为空则返回true</span></span><br><span class="line">m.<span class="built_in">end</span>()      <span class="comment">//返回指向map末尾的迭代器</span></span><br><span class="line">m.<span class="built_in">erase</span>()     <span class="comment">//删除一个元素</span></span><br><span class="line">m.<span class="built_in">find</span>()      <span class="comment">//查找一个元素</span></span><br><span class="line">m.<span class="built_in">insert</span>()    <span class="comment">// 插入元素        O(logn)</span></span><br><span class="line">m.<span class="built_in">max_size</span>()    <span class="comment">//返回可以容纳的最大元素个数</span></span><br><span class="line">m.<span class="built_in">size</span>()      <span class="comment">//返回map中元素的个数 O(1)</span></span><br><span class="line">m.<span class="built_in">swap</span>()      <span class="comment">//交换两个map</span></span><br></pre></td></tr></table></figure><h1 id="使用auto遍历STL容器："><a href="#使用auto遍历STL容器：" class="headerlink" title="使用auto遍历STL容器："></a>使用auto遍历STL容器：</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">queue&lt;int&gt; q;</span><br><span class="line">for(auto i:q) cout&lt;&lt;i&lt;&lt;&#x27; &#x27;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日刷题记录</title>
      <link href="/%E6%AF%8F%E6%97%A5%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95.html"/>
      <url>/%E6%AF%8F%E6%97%A5%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95.html</url>
      
        <content type="html"><![CDATA[<h2 id="2022年"><a href="#2022年" class="headerlink" title="2022年"></a>2022年</h2><p>$11.20$  洛谷  <a href="https://www.luogu.com.cn/problem/P1725">P1725 琪露诺</a>  （单调队列优化DP）</p><p>$11.15$  洛谷  <a href="https://www.luogu.com.cn/problem/P1714">P1714 切蛋糕</a>  （单调队列+前缀和）</p><p>$11.6$   洛谷  <a href="https://www.luogu.com.cn/problem/P3467">P3467 PLA-Postering</a>   (单调栈)</p><p>$11.5$  洛谷  <a href="https://www.luogu.com.cn/problem/P1578">P1578 奶牛浴场</a>  （最大子矩阵）</p><p>$10.23$  洛谷  P7910 [CSP-J 2021] 插入排序（记录下标） </p><p>$10.19$ 洛谷  P4653 [CEOI2017] Sure Bet （贪心+双指针）</p><p>$10.18$ UVA 11572 Unique Snowflakes（双指针+map）</p><p>$10.17$  洛谷  P2216​ 理想的正方形（二维单调队列）</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客搭建中的一些坑</title>
      <link href="/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91.html"/>
      <url>/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91.html</url>
      
        <content type="html"><![CDATA[<h2 id="css无法加载"><a href="#css无法加载" class="headerlink" title="css无法加载"></a>css无法加载</h2><p>解决方法：修改_config.yml配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">https://username.github.io/</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure><h2 id="博客语言为英文"><a href="#博客语言为英文" class="headerlink" title="博客语言为英文"></a>博客语言为英文</h2><p>解决方法：修改_config.yml配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br></pre></td></tr></table></figure><h2 id="报错-Spawn-failed"><a href="#报错-Spawn-failed" class="headerlink" title="报错 Spawn failed"></a>报错 Spawn failed</h2><p>解决办法：依次输入以下命令</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">rm</span> <span class="string">-rf</span> <span class="string">.deploy_git/</span></span><br><span class="line"></span><br><span class="line"><span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">core.autocrlf</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="string">hexo</span> <span class="string">clean</span> <span class="string">&amp;&amp;</span> <span class="string">hexo</span> <span class="string">g</span> <span class="string">&amp;&amp;</span> <span class="string">hexo</span> <span class="string">d</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="修改字体后无法显示css"><a href="#修改字体后无法显示css" class="headerlink" title="修改字体后无法显示css"></a>修改字体后无法显示css</h2><p>解决办法：用hexo clean清空缓存后hexo g -d</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>建站小记</title>
      <link href="/%E5%BB%BA%E7%AB%99%E5%B0%8F%E8%AE%B0.html"/>
      <url>/%E5%BB%BA%E7%AB%99%E5%B0%8F%E8%AE%B0.html</url>
      
        <content type="html"><![CDATA[<p>2020年搭了一个博客，后来电脑重装系统，于是把相关文件备份了一份。</p><p>博客迁移的时候发现_config.yml被删了，脑子一抽把github上的仓库删了又重新开了一个。</p><p>折腾了三天总算是建好了。</p><p>参考：<a href="https://xxxpt.blog.csdn.net/article/details/102557949">https://xxxpt.blog.csdn.net/article/details/102557949</a></p><p>update on 22.8.3： 换了一台游匣G15，这次迁移成功了 ^ _ ^</p><p>$$ 「路漫漫其修远兮，吾将上下而求索。」 $$</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/hello-world.html"/>
      <url>/hello-world.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
